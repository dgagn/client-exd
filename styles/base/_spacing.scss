@use "sass:map";
@use "breakpoint-suffix" as *;
@use "breakpoints";

$unit: 1em;

$spacing: (
    4xs: 0.125,
    3xs: 0.25,
    2xs: 0.375,
    xs: 0.5,
    sm: 0.75,
    md: 1.25,
    lg: 2,
    xl: 3.25,
    2xl: 5.25,
    3xl: 8.5,
    4xl: 13.75
);

$position: (
    top,
    bottom,
    left,
    right,
    x,
    y
);

:root {
    --spacing-unit: #{$unit};

    @each $size, $value in $spacing {
        --spacing-#{$size}: calc(#{$value} * var(--spacing-unit, #{$unit}));
    }
}

@function get($size) {
    @return var(--spacing-#{$size}, map.get($map: $spacing, $key: $size) * 1em);
}

@mixin generate-spacing($breakpoint: '') {
    $breakpoint-sufix: breakpoint-suffix($breakpoint);

    .padding-0#{$breakpoint-sufix} { padding: 0; }
    .margin-0#{$breakpoint-sufix} { margin: 0; }
    .margin-auto#{$breakpoint-sufix} { margin: auto; }

    .inset-0 {
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
    }

    @each $position in $position {
        @if ($position == 'x') {
            .margin-#{$position}-auto#{$breakpoint-sufix} {
                margin-right: auto;
                margin-left: auto;
            }
        }

        @else if($position == 'y') {
            .margin-#{$position}-auto#{$breakpoint-sufix} {
                margin-top: auto;
                margin-bottom: auto;
            }
        }

        @else {
            .margin-#{$position}-auto#{$breakpoint-sufix} { margin-#{$position}: auto; }
            .#{$position}-50\% { #{$position}: 50%; }
            .#{$position}-0 { #{$position}: 0; }
        }
    }

    @each $size, $value in $spacing {
        .margin-#{$size}#{$breakpoint-sufix} { margin: get($size); }
        .padding-#{$size}#{$breakpoint-sufix} { padding: get($size); }

        @each $position in $position {
            @if ($position == 'x') {
                .margin-#{$position}-#{$size}#{$breakpoint-sufix} {
                    margin-right: get($size);
                    margin-left: get($size);
                }
                .padding-#{$position}-#{$size}#{$breakpoint-sufix} {
                    padding-right: get($size);
                    padding-left: get($size);
                }
            }

            @else if($position == 'y') {
                .margin-#{$position}-#{$size}#{$breakpoint-sufix} {
                    margin-top: get($size);
                    margin-bottom: get($size);
                }
                .padding-#{$position}-#{$size}#{$breakpoint-sufix} {
                    padding-top: get($size);
                    padding-bottom: get($size);
                }
            }

            @else {
                .margin-#{$position}-#{$size}#{$breakpoint-sufix} { margin-#{$position}: get($size); }
                .padding-#{$position}-#{$size}#{$breakpoint-sufix} { padding-#{$position}: get($size); }
                .#{$position}-#{$size}#{$breakpoint-sufix} { #{$position}: get($size); }
            }
        }
    }
}

@include generate-spacing();

@each $breakpoint, $value in breakpoints.$breakpoints {
    @include breakpoints.get($breakpoint) {
        @include generate-spacing($breakpoint);
    }
}
